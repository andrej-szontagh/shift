
#ifndef _DEBUG_H
#define _DEBUG_H

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// #define M_DEBUG
// #define M_DEBUG_PROFILE_GPU
// #define M_DEBUG_PROFILE_FILE

#define M_DEBUG_MAX_TIMERS  256

#define M_DEBUG_FILE    "profile.log"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
//
//  PARAMS :
//
//  file - name/path of log file
//
//  DESCRIPTION :
//
//      Initializes debugger and creates log file (overwrites)
//
///////////////////////////////////////////////////////////
VOID    debug_Init      ();

///////////////////////////////////////////////////////////
//
//  PARAMS :
//
//  DESCRIPTION :
//
//      Destroys debugger and close log file
//
///////////////////////////////////////////////////////////
VOID    debug_Destroy   ();

///////////////////////////////////////////////////////////
//
//  PARAMS :
//
//  id -   ID of timer to start (to handle overlapping timers)
//         Ranges from 0 to  M_DEBUG_MAX_TIMERS
//
//  DESCRIPTION :
//
//      Returns log file handler
//
///////////////////////////////////////////////////////////
VOID    debug_StartTimer        (UINT_32 id);
VOID    debug_StartTimerQuery   (UINT_32 id);

///////////////////////////////////////////////////////////
//
//  PARAMS :
//
//  id -   ID of timer to start (to handle overlapping timers)
//         Ranges from 0 to  M_DEBUG_MAX_TIMERS
//  msg -   Text message to identify timer in log file
//
//  DESCRIPTION :
//
//      Returns time delta (in ticks [ms])
//
///////////////////////////////////////////////////////////
VOID    debug_EndTimer          (UINT_32 id, CHARP msg, FLOAT_64 &elapsed);
VOID    debug_EndTimerQuery     (UINT_32 id, CHARP msg, FLOAT_64 &elapsed, FLOAT_64 &elapsedg);

#endif
